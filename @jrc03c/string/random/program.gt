-------------------------------------------------------------------------------
-- @jrc03c/string/random
-------------------------------------------------------------------------------
-- url        : https://www.guidedtrack.com/programs/32382/edit
-- unit tests : https://www.guidedtrack.com/programs/32383/edit
-- playground : https://www.guidedtrack.com/programs/32384/edit
-- author     : Josh Castle (joshrcastle@gmail.com)
-------------------------------------------------------------------------------
-- Returns `random_string`, a random string of a given length.
--
-- inputs:
--     `random_string_length` = the length of the string to be generated; must
--         a positive integer; default is 8
--
--     `random_string_charset` = the set of characters to use to generate the
--         random string; can be either a non-empty string (text) or a
--         non-empty array (collection) of strings; default is:
--         "abcdefghijklmnopqrstuvwxyz1234567890"
--
-- outputs:
--     `random_string` = the generated string
-------------------------------------------------------------------------------

-- if no length was given, then define a default length
*if: not random_string_length
	>> random_string_length = 8

-- confirm that the length is a number
*if: not (random_string_length.type = "number")
	>> error_title = "Error: @jrc03c/string/random"
	>> error_message = "The `random_string_length` variable must be a positive integer! (Its current value is: {random_string_length})"
	*program: @jrc03c/show-error
	*return

-- confirm that the length is greater than 0
*if: random_string_length <= 0
	>> error_title = "Error: @jrc03c/string/random"
	>> error_message = "The `random_string_length` variable must be a positive integer! (Its current value is: {random_string_length})"
	*program: @jrc03c/show-error
	*return

-- confirm that the length is an integer
*if: not (random_string_length.round = random_string_length)
	>> error_title = "Error: @jrc03c/string/random"
	>> error_message = "The `random_string_length` variable must be a positive integer! (Its current value is: {random_string_length})"
	*program: @jrc03c/show-error
	*return

-- if no character set was provided, then define a default character set
*if: not random_string_charset
	>> random_string_charset = "abcdefghijklmnopqrstuvwxyz1234567890"

-- if the character set is a string, then convert it to an array
*if: random_string_charset.type = "string"
	>> random_string_charset = random_string_charset.split("")

-- confirm that the character set is an array
*if: not (random_string_charset.type = "collection")
	>> error_title = "Error: @jrc03c/string/random"
	>> error_message = "The `random_string_charset` variable must be a non-empty string (text) or a non-empty array (collection)! (Its current value is: {random_string_charset})"
	*program: @jrc03c/show-error
	*return

-- confirm that the character set isn't empty
*if: random_string_charset.size = 0
	>> error_title = "Error: @jrc03c/string/random"
	>> error_message = "The `random_string_charset` variable must be a non-empty string (text) or a non-empty array (collection)! (Its current value is: {random_string_charset})"
	*program: @jrc03c/show-error
	*return

-- confirm that each value in the character set is a string
*for: i, value in random_string_charset
	*if: not (value.type = "string")
		>> error_title = "Error: @jrc03c/string/random"
		>> error_message = "The `random_string_charset` variable must be a non-empty string (text) or a non-empty array (collection)! (Its current value is: {random_string_charset})"
		*program: @jrc03c/show-error
		*return

>> random_string = ""

*while: random_string.size < random_string_length
	>> random_string_charset.shuffle
	>> random_string_char = random_string_charset[1]
	>> random_string = "{random_string}{random_string_char}"
