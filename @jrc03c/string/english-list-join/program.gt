-------------------------------------------------------------------------------
-- @jrc03c/english-list-join
-------------------------------------------------------------------------------
-- url        : https://www.guidedtrack.com/programs/26228/edit
-- unit tests : https://www.guidedtrack.com/programs/26231/edit
-- playground : https://www.guidedtrack.com/programs/26230/edit
-- author     : Josh Castle (joshrcastle@gmail.com)
-------------------------------------------------------------------------------
-- Joins a list of values in a standard English way such that (1) a delimiter
-- appears between each pair of values, and (2) the final value is preceded by
-- a coordinating conjunction. For example, the list `["apples", "bananas",
-- "cherries"]` would be joined into the English phrase "apples, bananas, and
-- cherries" (i.e., delimited by commas and with an "and" before the final
-- word).
--
-- inputs:
--     `list` = the list of values to join
--
--     `delimiter` = a string that separates each pair of values; the default is
--         a comma
--
--     `conjunction` = a string that will precede the final value; the default
--         is "and"
--
-- outputs:
--     `joined` = the generated string in which (1) all values have been joined
--         by the delimiter and (2) the final value has been preceded by the
--         conjunction
-------------------------------------------------------------------------------

*if: not list
	>> error_title = "@jrc03c/english-list-join"
	>> error_message = "No variable called `list` was defined!"
	*program: @jrc03c/show-error
	*return

*if: not (list.type = "collection")
	>> error_title = "@jrc03c/english-list-join"
	>> error_message = "A variable called `list` was defined, but its value was not a collection! (Instead, it was a(n) {list.type}.)"
	*program: @jrc03c/show-error
	*return

*if: not delimiter
	>> delimiter = ","

*if: not (delimiter.type = "string")
	>> delimiter = delimiter.text

*if: delimiter.size = 0
	>> delimiter = ","

*if: not conjunction
	>> conjunction = "and"

*if: not (conjunction.type = "string")
	>> conjunction = conjunction.text

>> joined = ""

*if: list.size = 0
	*return
	
*if: list.size = 1
	>> joined = list[1].text
	*return
	
*if: list.size = 2
	>> joined = "{list[1]} {conjunction} {list[2]}"
	*return

*for: i, v in list
	*if: i < list.size
		*if: joined.size > 0
			>> joined = "{joined}{delimiter} {v}"
			
		*if: joined.size = 0
			>> joined = v.text
		
	*if: not (i < list.size)
		>> joined = "{joined}{delimiter} {conjunction} {v}"